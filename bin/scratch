#!/usr/bin/env python

"""
Scratch.

Usage:
    scratch iterate <file> [--] <command>...
    scratch session <path>
"""


__version__ = '0.0.1'


from collections import OrderedDict
import traceback
import importlib
import types
import sys
import os


from docopt import docopt
import vanilla


def mkdirp(path):
    try:
        os.mkdir(path)
    except OSError:
        pass


def read(*a):
    try:
        return open(os.path.join(*a)).read().strip()
    except:
        pass


def iterate(hub, path, command):
    inot = hub.inotify()
    ch = inot.watch(os.path.dirname(path) or '.', mask=inot.IN_MODIFY)
    p = hub.process.execv(command)
    for mask, name in ch:
        if name == os.path.basename(path):
            if p.check_liveness():
                p.terminate()
                p.done.recv()
            p = hub.process.execv(command)


def session(hub, path):
    print "---"
    print "starting session:", path

    inot = hub.inotify()
    local = {'hub': hub}

    mkdirp(path)

    def reader(path):
        watch = inot.watch(path, mask=inot.IN_MODIFY)
        out = hub.channel()
        seen = {}

        for name in os.listdir(path):
            watch.send((inot.IN_MODIFY, name))

        @hub.spawn
        def _():
            for mask, name in watch:
                if name.startswith('.'):
                    continue
                content = read(path, name)
                if not content:
                    continue
                if name in seen and seen[name] == content:
                    continue
                seen[name] = content
                out.send((name, content))
        return out

    def run_eval(ch):
        for name, content in ch:
            try:
                print 'eval:', name
                result = eval(content, globals(), local)
                print result
            except Exception:
                traceback.print_exc()

    def run_data(ch):
        for name, content in ch:
            print "loading", name
            local[name] = content

    def run_code(ch):
        for name, content in ch:
            try:
                print 'exec:', name
                exec content in globals(), local
            except Exception:
                traceback.print_exc()

    def run_root(ch):
        for name, content in ch:
            if name == 'import':
                for module in content.split('\n'):
                    print 'importing', module
                    if '.' in module:
                        bits = module.split('.')
                        name = bits[-1]
                        module = '.'.join(bits[:-1])
                        module = importlib.import_module(module, name)
                        if type(module) == types.ModuleType:
                            globals()[name] = getattr(module, name)
                        else:
                            globals()[name] = module
                    else:
                        globals()[module] = importlib.import_module(module)

    folders = OrderedDict()
    folders[''] = run_root
    folders['data'] = run_data
    folders['code'] = run_code
    folders['eval'] = run_eval

    for folder in folders:
        full = os.path.join(path, folder)
        mkdirp(os.path.join(full))
        hub.spawn(folders[folder], reader(full))


def main(argv):
    h = vanilla.Hub()

    if argv['iterate']:
        h.spawn(iterate, h, argv['<file>'], argv['<command>'])

    if argv['session']:
        h.spawn(session, h, argv['<path>'])

    h.stop_on_term()

    print 'done.'
    print


if __name__ == '__main__':
    argv = docopt(__doc__, version=__version__)
    sys.exit(main(argv))
